# 1 level only with speed doubling on each level completion

from turtle import Screen
from background import Background
from barrier import Barrier
from car import Car
from player import Player
from scoreboard import Scoreboard
import time
import random

screen = Screen()
screen.setup(width=600, height=600)
screen.tracer(0)
car3_part_positions = [(0, 130), (20, 130), (40, 130), (20, 150), (5, 110), (35, 110)]
car2_part_positions = [(0, 0), (20, 0), (40, 0), (20, 20), (5, -20), (35, -20)]
car1_part_positions = [(0, -130), (20, -130), (40, -130), (20, -110), (5, -150), (35, -150)]
ROAD1_START_POSITIONS = [(-280, -130), (-260, -130), (-240, -130), (-260, -110), (-275, -150), (-245, -150)]
ROAD2_START_POSITIONS = [(-20, 0), (0, 0), (20, 0), (0, 20), (-15, -20), (15, -20)]
ROAD3_START_POSITIONS = [(-20, 130), (0, 130), (20, 130), (0, 150), (-15, 110), (15, 110)]
CAR2_SPEED = 20
GAME_SPEED = 0.1



background = Background()
barrier = Barrier()
player = Player()
car1 = Car(car1_part_positions)
car2 = Car(car2_part_positions)
car3 = Car(car3_part_positions)
scoreboard = Scoreboard()

screen.listen()
screen.onkeypress(key="Up", fun=player.move_up)
screen.onkeypress(key="Down", fun=player.move_down)
screen.onkeypress(key="Left", fun=player.move_left)
screen.onkeypress(key="Right", fun=player.move_right)

# Print starting level
scoreboard.print_level()

game_is_on = True
while game_is_on:

    # Move car1
    car1.move_car(20)
    if car1.car_center.xcor() > 300:
        car1.refresh_car_position(ROAD1_START_POSITIONS)

    # Move car2
    car2.move_car(CAR2_SPEED)
    if car2.car_center.xcor() > 300 or car2.car_center.xcor() < -300:
        car2.refresh_car_position(ROAD2_START_POSITIONS)
        CAR2_SPEED *= -1

    # Move car3
    move_distance = random.randint(-50, 50)
    car3.move_car(move_distance)
    if car3.car_center.xcor() > 300 or car3.car_center.xcor() < -300:
        car3.refresh_car_position(ROAD3_START_POSITIONS)

    # Detect collision with barriers
    for barriers in barrier.all_barriers:
        if barriers.distance(player) < 25:
            game_is_on = False

    # Detect collision with car1
    for parts in car1.all_parts:
        if parts.distance(player) < 25:
            game_is_on = False

    # Detect collision with car2
    for parts in car2.all_parts:
        if parts.distance(player) < 25:
            game_is_on = False

    # Detect collision with car3
    for parts in car3.all_parts:
        if parts.distance(player) < 25:
            game_is_on = False

    # Crossing finish line
    if player.at_finish_line():
        scoreboard.increment_level()
        GAME_SPEED *= 0.5


    time.sleep(GAME_SPEED)
    screen.update()

    # Checking game over
    if not game_is_on:
        scoreboard.print_game_over()







screen.exitonclick()
